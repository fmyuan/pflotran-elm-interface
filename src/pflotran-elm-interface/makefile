###############################################################################
# PFLOTRAN makefile for coupling with E3SM Land Model (ELM) (historically i.e. CLM)
#
# Before building make sure that the environmental variables
#   PETSC_DIR and PETSC_ARCH are defined.
#
# To build PFLOTRAN library, i.e. libpflotran.a , from within the source directory, run, e.g.:
#   cd $PFLOTRAN_DIR/src/pflotran-elm-interface
#   make link_common_src
#   make PETSCT_DIR=$PETSC_DIR libpflotran.a
# this will generate the libpflotran.a and object and .mod files in the source directory.
# 
# To have the object/executable files placed in a separate directory,
# run make from the target directory and specify the makefile and 
# source directory locations to make, e.g.:
#  mkdir -p $PFLOTRAN_DIR/build/$PETSC_ARCH
#  cd $PFLOTRAN_DIR/build/$PETSC_ARCH
#  make -f $PFLOTRAN_DIR/src/pflotran/makefile SRC_DIR=$PFLOTRAN_DIR/src/pflotran pflotran
#
# Targets:
# libpflotran.a -- PFLOTRAN library specifically for coupling into E3SM Land Model (ELM)  
# test -- run unit (utest) and regression (rtest) tests
# check -- verify that PFLOTRAN was built correctly and runs
# clean-tests -- remove the output generated by tests
# clean-pflotran -- remove .o, .mod, and other build files 
# echo-flags -- print the make and compiler flags to be used
#
###############################################################################

# PFLOTRAN-CLM source directory -- default to the current directory
SRC_DIR = ./

# make option to search for source files in $SRC_DIR
VPATH = $(SRC_DIR)

pflotran_src = $(SRC_DIR)/../pflotran
common_src   =
regression_test_dir = $(SRC_DIR)/../../regression_tests
unit_test_dir = $(SRC_DIR)/unittests

# Import variables/options/rules from PETSc.
include ${PETSC_DIR}/lib/petsc/conf/variables
include ${PETSC_DIR}/lib/petsc/conf/rules
# reseting PETSC_MAKE_STOP_ON_ERROR causes build to stop on error.
PETSC_MAKE_STOP_ON_ERROR=
# Those files also include 
# ${PETSC_DIR}/${PETSC_ARCH}/lib/petsc/conf/petscvariables
# and 
# ${PETSC_DIR}/${PETSC_ARCH}/lib/petsc/conf/petscrules
# so that PFLOTRAN will be built with the same options as 
# the petsc configured in $PETSC_DIR/$PETSC_ARCH

MYFLAGS = -I. 

###############################################################################
# Preprocessor flags for special PFLOTRAN features/hacks
###############################################################################
ifdef debugbuild
  MYFLAGS += -g -O0
endif

# always in coupling with CLM
MYFLAGS += ${FC_DEFINE_FLAG}CLM_PFLOTRAN ${FC_DEFINE_FLAG}NO_VAPOR_DIFFUSION

ifdef column_mode
  # in this case, no lateral connections and each column totally on 1 processor, implying that NO need to do mpi scatter/gather 
  # AND, vecs DON'T include ghost_cells if any
  # WHY bother? - it appears that PETSc 'VecScatterEnd' in many modules involving call to 'MPI_Waitany', which takes a lot of computing time (making sense although).   
  MYFLAGS += ${FC_DEFINE_FLAG}COLUMN_MODE
endif

# calculate the jacobians for tracking variables if coupled with CLM-CN
ifdef nojacboian_track_vars
  MYFLAGS += ${FC_DEFINE_FLAG}nojacobian_track_vars
endif

ifdef match_tough2
  MYFLAGS += ${FC_DEFINE_FLAG}MATCH_TOUGH2
endif

ifdef internal_mass_flux
  MYFLAGS += ${FC_DEFINE_FLAG}COMPUTE_INTERNAL_MASS_FLUX
endif

ifdef fmdm
  MYFLAGS += ${FC_DEFINE_FLAG}FMDM_MODEL
endif

ifdef ye_flux
  MYFLAGS += ${FC_DEFINE_FLAG}YE_FLUX
endif

ifdef solid_solution
  MYFLAGS += ${FC_DEFINE_FLAG}SOLID_SOLUTION
endif

ifdef dbl
  MYFLAGS += ${FC_DEFINE_FLAG}DOUBLE_LAYER
endif

ifdef condnr
  MYFLAGS += ${FC_DEFINE_FLAG}CONDNR
endif


ifdef coll
  MYFLAGS += ${FC_DEFINE_FLAG}COLL
endif

ifdef have_hdf5
  MYFLAGS += -I$(HDF5_INCLUDE) -I$(HDF5_LIB) ${FC_DEFINE_FLAG}PETSC_HAVE_HDF5
endif

ifdef ugrid_debug
  MYFLAGS += ${FC_DEFINE_FLAG}UGRID_DEBUG
endif

ifdef amanzi_bgd
  MYFLAGS += ${FC_DEFINE_FLAG}AMANZI_BGD
endif

ifdef surface_th_debug
  MYFLAGS += ${FC_DEFINE_FLAG}SURFACE_TH_DEBUG
endif

ifdef th_bc_hack
  MYFLAGS += ${FC_DEFINE_FLAG}THDIRICHLET_TEMP_BC_HACK
endif

ifdef debug
  MYFLAGS += ${FC_DEFINE_FLAG}DEBUG
endif

ifdef smoothing2
  MYFLAGS += ${FC_DEFINE_FLAG}SMOOTHING2
endif

ifdef use_matseqaij_fix
  MYFLAGS += ${FC_DEFINE_FLAG}USE_MATSEQAIJ_FIX
endif

ifdef debug_geomech_regression
  MYFLAGS += ${FC_DEFINE_FLAG}GEOMECHANICS_REGRESSION_DEBUG
endif

ifdef geomech_debug
  MYFLAGS += ${FC_DEFINE_FLAG}GEOMECH_DEBUG
endif

UPDATE_PROVENANCE=0
ifdef provenance
  UPDATE_PROVENANCE=1
endif

ifdef well_debug
  MYFLAGS += ${FC_DEFINE_FLAG}WELL_DEBUG
endif

ifdef towg_debug
  MYFLAGS += ${FC_DEFINE_FLAG}TOWG_DEBUG
endif

ifdef ug_mpi_scatter_glb
  MYFLAGS += ${FC_DEFINE_FLAG}MPI_SCATTER_GLOBAL
endif

ifdef ug_mpi_scatter_ghost
  MYFLAGS += ${FC_DEFINE_FLAG}MPI_SCATTER_GHOST_ONLY
endif

ifdef have_hdf5
LIBS +=  -L${HDF5_LIB} -lhdf5_fortran -lhdf5 -lz 
endif

# Set this accordingly on your platform
# SCORPIO_DIR=${HOME}/soft/scorpio
ifdef scorpio
  LIBS += -L${SCORPIO_DIR}/lib -lscorpio
  MYFLAGS += ${FC_DEFINE_FLAG}SCORPIO
  MYFLAGS += ${FC_DEFINE_FLAG}SCORPIO_WRITE
  MYFLAGS += -I${SCORPIO_DIR}/include
endif

ifdef codecov
  MYFLAGS += -fprofile-arcs -ftest-coverage
  LIBS += -lgcov
endif

###############################################################################
# Assign additional compiler/preprocessor flags
###############################################################################

# These flags are supplemental to the PETSc flags
CFLAGS   =
FFLAGS   =
CPPFLAGS = ${MYFLAGS}
FPPFLAGS = ${MYFLAGS}

# In ${PETSC_DIR}/lib/petsc/conf/variables, 
# FPPFLAGS is appended to FCPPFLAGS.
# FCPPFLAGS is then used when compiling .F90 files.
# Similarly, CPPFLAGS is appended to CCPPFLAGS
#
# PETSc (${PETSC_DIR}/${PETSC_ARCH}/lib/petsc/conf/petscrules) defines
# the default rule for compiling .F90 files:
#.F.o .F90.o .F95.o: 
#	${FC} -c ${FC_FLAGS} ${FFLAGS} ${FCPPFLAGS} -o $@ $<
#
# FC_FLAGS is defined in ${PETSC_DIR}/${PETSC_ARCH}/lib/petsc/conf/petscvariables

# List of files to remove when running "make clean-pflotran"
CLEANFILES       = libpflotran.a make.log

###############################################################################
# Lists all files that PFLOTRAN (and other targets) depends on 
#
# '# Begin Source Block' and '# End Source Block' are keywords that bound the
# .o files.  The python script PFLOTRAN_DIR/src/python/pflotran_dependencies.py
# creates a list of source files associated with all .o files and parses them
# to create the list of dependencies included below.
#
###############################################################################

# Begin object file block

# please see pflotran_object_files.txt for a list of the object files. this 
# approach of including the object files allows us to re-use the list in other
# makefiles (e.g. pflotran-elm-interface/makefile).
include $(SRC_DIR)/pflotran_object_files.txt

# End object file block

###############################################################################
# Targets
###############################################################################

# Concatentate dependency groups 
pflotran_base_obj = $(util_obj) $(eos_obj) $(mode_aux_obj) $(mode_obj) \
	$(shared_mode_aux_obj) $(chem_obj) $(geomech_obj) $(well_obj) \
	$(grid_obj) $(relations_obj) $(properties_obj) $(dataset_obj) \
	$(srcsink_obj) $(io_obj) $(misc_obj) $(surface_obj) $(solver_obj) \
	$(deriv_obj)

# PFLOTRAN as a library for coupling with ELM
# source files to be copied/linked from $(pflotran_src) to $SRC_DIR
common_srcfiles := $(subst $(common_src),,$(pflotran_base_obj:.o=.F90))
clmpf_interface_srcfiles := $(subst $(SRC_DIR),,$(clmpf_interface_obj:.o=.F90))
lib_pflotran_obj := $(pflotran_base_obj) $(clmpf_interface_obj)

libpflotran.a : $(lib_pflotran_obj)
	$(AR) $(ARFLAGS) $@ $(lib_pflotran_obj)

###############################################################################
# Dependencies
# Dependencies stemming from "use" statements.
# These ensure that the module files are built in the correct order.
# The source file (i.e. file.F90) is intentionally omitted; 
# it is picked up by the default/implicit build rule (defined by PETSc)
###############################################################################
ifndef fast
  include $(SRC_DIR)/pflotran_dependencies.txt
endif
###############################################################################
# End Dependencies
###############################################################################


###############################################################################
# Other targets (clean, testing, etc)
###############################################################################

# developer level regression testing
test : utest rtest

utest : pflotran
	@if [ -d $(unit_test_dir) ]; then \
		$(MAKE) --directory=$(unit_test_dir) EXE_DIR=${PWD} test; \
	fi

rtest : pflotran
	@if [ -d $(regression_test_dir) ]; then \
		$(MAKE) --directory=$(regression_test_dir) PFLOTRAN=${PWD}/pflotran test; \
	fi

clean-tests : FORCE
	@if [ -d $(unit_test_dir) ]; then \
		$(MAKE) --directory=$(unit_test_dir) EXE_DIR=${PWD} $(MAKECMDGOALS); \
	fi
	@if [ -d $(regression_test_dir) ]; then \
		$(MAKE) --directory=$(regression_test_dir) PFLOTRAN=${PWD}/pflotran $(MAKECMDGOALS); \
	fi

# user level tests to verify pflotran is built correctly
check : FORCE
	@if [ -d $(regression_test_dir) ]; then \
		$(MAKE) --directory=$(regression_test_dir) PFLOTRAN=${PWD}/pflotran $(MAKECMDGOALS); \
	fi

clean-pflotran :
	-rm -f $(CLEANFILES) *.o *.mod *.a *.gcov *.gcda *.gcno;

link_common_src: FORCE
	@if [ -d $(pflotran_src) ]; then \
		ln -sf $(addprefix $(pflotran_src)/,$(common_srcfiles)) $(SRC_DIR); \
		ln -sf $(pflotran_src)/pflotran_no_provenance.F90 $(SRC_DIR)/pflotran_provenance.F90; \
	fi

copy_common_src: FORCE
	@if [ -d $(pflotran_src) ]; then \
		cp -f $(addprefix $(pflotran_src)/,$(common_srcfiles)) $(SRC_DIR); \
		cp $(pflotran_src)/pflotran_no_provenance.F90 $(SRC_DIR)/pflotran_provenance.F90; \
	fi

clean_common_src: FORCE
	-rm -f $(addprefix $(SRC_DIR)/,$(common_srcfiles));

# Flags
echo-flags :
	@echo ; \
	echo "PFLOTRAN source"; \
	echo "SRC_DIR = $(SRC_DIR)"; \
	echo ; \
	echo "PETSc environment"; \
	echo "PETSC_DIR = $(PETSC_DIR)"; \
	echo "PETSC_ARCH = $(PETSC_ARCH)"; \
	echo ; \
	echo "Flags defined in this makefile"; \
	echo "CFLAGS = $(CFLAGS)"; \
	echo "FFLAGS = $(FFLAGS)"; \
	echo ; \
	echo "MYFLAGS = $(MYFLAGS)"; \
	echo "CPPFLAGS = $(CPPFLAGS)"; \
	echo "FPPFLAGS = $(FPPFLAGS)"; \
	echo ; \
	echo "Flags invoked when compiling fortran source"; \
	echo "FC_FLAGS = $(FC_FLAGS)"; \
	echo "FFLAGS = $(FFLAGS)"; \
	echo "FCPPFLAGS =  $(FCPPFLAGS)"; \
	echo ; \
	echo "Included Libraries" ;\
	echo "LIBS = $(LIBS)"; \
	echo ; \
	echo "PETSC_LIB = $(PETSC_LIB)"; \
	echo ; \


# null rule to force things to happen
FORCE :
